package Text;

public class Texts {


    private static String String_1_2 = "Multiples of 3 and 5";
    private static String String_1_3 = "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n" +
            "Find the sum of all the multiples of 3 or 5 below 1000.";

    private static String String_2_2 = "Even Fibonacci numbers";
    private static String String_2_3 = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n" +
            "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" +
            "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

    private static String String_3_2 = "Largest prime factor";
    private static String String_3_3 = "The prime factors of 13195 are 5, 7, 13 and 29.\n" +
            "What is the largest prime factor of the number 600851475143 ?";

    private static String String_4_2 = "Largest palindrome product";
    private static String String_4_3 = "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n" +
            "Find the largest palindrome made from the product of two 3-digit numbers.";

    private static String String_5_2 = "Smallest multiple";
    private static String String_5_3 = "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n" +
            "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?";

    private static String String_6_2 = "Sum square difference";
    private static String String_6_3 = "The sum of the squares of the first ten natural numbers is,\n" +
            "1^2 + 2^2 + ... + 10^2 = 385\n" +
            "The square of the sum of the first ten natural numbers is,\n" +
            "(1 + 2 + ... + 10)^2 = 55^2 = 3025\n" +
            "Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n" +
            "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.";

    private static String String_7_2 = "10001st prime";
    private static String String_7_3 = "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n" +
            "What is the 10 001st prime number?";

    private static String String_8_2 = "Largest product in a series";
    private static String String_8_3 = "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n" +
            "Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product? (read file)";

    private static String String_9_2 = "Special Pythagorean triplet";
    private static String String_9_3 = "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n" +
            "a^2 + b^2 = c^2\n" +
            "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n" +
            "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n" +
            "Find the product abc";

    private static String String_10_2 = "Summation of primes";
    private static String String_10_3 = "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n" +
            "Find the sum of all the primes below two million.";

    private static String String_11_2 = "Largest product in a grid";
    private static String String_11_3 = "In the 20×20 grid below, four numbers along a diagonal line have been marked in red." +
            "The product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n" +
            "What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid? (see file)";

    private static String String_12_2 = "Highly divisible triangular number";
    private static String String_12_3 = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n" +
            "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n" +
            "Let us list the factors of the first seven triangle numbers:" +
            "We can see that 28 is the first triangle number to have over five divisors.\n" +
            "What is the value of the first triangle number to have over five hundred divisors?";

    private static String String_13_2 = "Large sum";
    private static String String_13_3 = "Work out the first ten digits of the sum of the following one-hundred 50-digit numbers. (see file)";

    private static String String_14_2 = "Longest Collatz sequence";
    private static String String_14_3 = "The following iterative sequence is defined for the set of positive integers:\n" +
            "n → n/2 (n is even)\n" +
            "n → 3n + 1 (n is odd)\n" +
            "Using the rule above and starting with 13, we generate the following sequence:\n" +
            "13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n" +
            "It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n" +
            "Which starting number, under one million, produces the longest chain?\n" +
            "NOTE: Once the chain starts the terms are allowed to go above one million.";

    private static String String_15_2 = "Lattice paths";
    private static String String_15_3 = "Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner." +
            "How many such routes are there through a 20×20 grid?";

    private static String String_16_2 = "Power digit sum";
    private static String String_16_3 = "2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\n" +
            "What is the sum of the digits of the number 2^1000?";

    private static String String_17_2 = "Number letter counts";
    private static String String_17_3 = "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n" +
            "If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n" +
            "NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.";

    private static String String_18_2 = "Maximum path sum I";
    private static String String_18_3 = "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.\n" +
            "That is, 3 + 7 + 4 + 9 = 23.\n" +
            "Find the maximum total from top to bottom of the triangle below (see file):" +
            "NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)";

    public static void PrintText(int Number_of_task){
        PrintFirstString(Number_of_task);

        switch (Number_of_task){
            case (1):
                System.out.println(String_1_2);
                System.out.println(String_1_3);
                Separator();
                break;
            case (2):
                System.out.println(String_2_2);
                System.out.println(String_2_3);
                Separator();
                break;
            case (3):
                System.out.println(String_3_2);
                System.out.println(String_3_3);
                Separator();
                break;
            case (4):
                System.out.println(String_4_2);
                System.out.println(String_4_3);
                Separator();
                break;
            case (5):
                System.out.println(String_5_2);
                System.out.println(String_5_3);
                Separator();
                break;
            case (6):
                System.out.println(String_6_2);
                System.out.println(String_6_3);
                Separator();
                break;
            case (7):
                System.out.println(String_7_2);
                System.out.println(String_7_3);
                Separator();
                break;
            case (8):
                System.out.println(String_8_2);
                System.out.println(String_8_3);
                Separator();
                break;
            case (9):
                System.out.println(String_9_2);
                System.out.println(String_9_3);
                Separator();
                break;
            case (10):
                System.out.println(String_10_2);
                System.out.println(String_10_3);
                Separator();
                break;
            case (11):
                System.out.println(String_11_2);
                System.out.println(String_11_3);
                Separator();
                break;
            case (12):
                System.out.println(String_12_2);
                System.out.println(String_12_3);
                Separator();
                break;
            case (13):
                System.out.println(String_13_2);
                System.out.println(String_13_3);
                Separator();
                break;
            case (14):
                System.out.println(String_14_2);
                System.out.println(String_14_3);
                Separator();
                break;
            case (15):
                System.out.println(String_15_2);
                System.out.println(String_15_3);
                Separator();
                break;
            case (16):
                System.out.println(String_16_2);
                System.out.println(String_16_3);
                Separator();
                break;
            case (17):
                System.out.println(String_17_2);
                System.out.println(String_17_3);
                Separator();
                break;
            case (18):
                System.out.println(String_18_2);
                System.out.println(String_18_3);
                Separator();
                break;
        }


    }
    private static void PrintFirstString(int i){
        System.out.println("Starting Task #" + i + "\n");
    }

    private static void Separator(){
        for (int i = 0; i<=20; i++){
            System.out.print("-");
        }
        System.out.print("\n\n");
    }

    public static void Gap(){
        for (int i = 0; i < 1; i++){
            System.out.println("\n");
        }
    }
}
